// This file is auto-generated by @hey-api/openapi-ts

export type CanvasTemplateInstanceLink = {
  /**
   * The relation type of the link.
   */
  identifier: string;
  /**
   * The qualifier of the link.
   */
  qualifier: string;
};

export type Link = {
  /**
   * The relation type of the link.
   */
  relationType: string;
  /**
   * The href of the link.
   */
  href?: string;
  /**
   * The object key of the link, if TYPE is OBJECT.
   */
  objectKey?: string;
  /**
   * The title of the link
   */
  title: string;
  /**
   * The language of the link.
   */
  lang?: Array<string>;
  /**
   * The creation date of the Link.
   */
  createdAt: string;
  /**
   * The last update date of the Link.
   */
  updatedAt: string;
};

export type LinkSetDto = {
  /**
   * The ID of the Link Set.
   */
  id?: string;
  /**
   * The identifier of the Link Set.
   */
  identifier?: string;
  /**
   * The qualifier of the Link Set.
   */
  qualifier: string;
  /**
   * The links of the Link Set.
   */
  links: Array<Link>;
  /**
   * The creation date of the Link Set.
   */
  createdAt: string;
  /**
   * The last update date of the Link Set.
   */
  updatedAt: string;
};

export type CreateTheme = {
  /**
   * The name of the theme
   */
  name: string;
  /**
   * The color of the theme, used to generate the pallette.
   */
  color: string;
};

export type Theme = {
  /**
   * The ID of the theme
   */
  id: string;
  /**
   * The name of the theme
   */
  name: string;
  /**
   * The theme palette
   */
  variables: {
    [key: string]: unknown;
  };
  /**
   * The date the theme was created
   */
  createdAt: string;
  /**
   * The date the theme was last updated
   */
  updatedAt: string;
  /**
   * The organization that owns the theme
   */
  organizationId: string;
};

export type UpdateTheme = {
  /**
   * The name of the theme
   */
  name: string;
  /**
   * The color of the theme
   */
  color: string;
};

export type UpsertLinkDto = {
  /**
   * The relation type of the link.
   */
  relationType: string;
  /**
   * The href of the link.
   */
  href: string;
  /**
   * The object key of the link, if TYPE is OBJECT.
   */
  objectKey?: string;
  /**
   * The title of the link.
   */
  title: string;
  /**
   * The language of the link.
   */
  lang?: Array<string>;
};

export type CreateLinkSetDto = {
  /**
   * The identifier of the Link Set.
   */
  identifier: string;
  /**
   * The qualifier of the Link Set.
   */
  qualifier: string;
  /**
   * The links of the Link Set.
   */
  links: Array<UpsertLinkDto>;
};

export type LinkSet = {
  /**
   * The ID of the Link Set.
   */
  id?: string;
  /**
   * The identifier of the Link Set.
   */
  identifier?: string;
  /**
   * The qualifier of the Link Set.
   */
  qualifier: string;
  /**
   * The links of the Link Set.
   */
  links: Array<Link>;
  /**
   * The creation date of the Link Set.
   */
  createdAt: string;
  /**
   * The last update date of the Link Set.
   */
  updatedAt: string;
};

export type UpdateLinkSetDto = {
  /**
   * The identifier of the Link Set.
   */
  identifier: string;
  /**
   * The qualifier of the Link Set.
   */
  qualifier: string;
  /**
   * The links of the Link Set.
   */
  links: Array<UpsertLinkDto>;
};

export type CanvasTemplate = {
  /**
   * The unique identifier of the canvas template
   */
  id: string;
  /**
   * The name of the template
   */
  name?: string;
  /**
   * The Handlebars template string
   */
  template: string;
  /**
   * JSON schema defining the template variables
   */
  schema: {
    [key: string]: unknown;
  };
  /**
   * When the template was created
   */
  createdAt: string;
  /**
   * When the template was last updated
   */
  updatedAt: string;
};

export type CreateCanvasTemplate = {
  name: string;
  template: string;
  schema: {
    [key: string]: unknown;
  };
  themeId?: string;
};

export type CanvasTemplateInstance = {
  id: string;
  templateId: string;
  variables: {
    [key: string]: unknown;
  };
  renderedOutput: string;
  createdAt: string;
  updatedAt: string;
};

export type CreateCredentialIssuerProfile = {
  /**
   * The name of the issuer party or organization for this profile.
   */
  name: string;
  /**
   * The identifier (did:web) used to identify the issuer for this profile.
   */
  identifierId: string;
};

/**
 * The profile used to issue credentials such as Digital Product Passports against.
 */
export type CredentialIssuerProfile = {
  /**
   * The unique identifier of the credential issuer profile.
   */
  id: string;
  /**
   * The organization name used in credential issuance.
   */
  name: string;
  /**
   * The identifier used to issue credentials.
   */
  identifierId: string;
};

export type Paginated = {
  total: number;
  page: number;
  limit: number;
};

export type PaginatedCredentialIssuerProfiles = {
  /**
   * The list of credential issuer profiles
   */
  items: Array<CredentialIssuerProfile>;
  /**
   * The pagination metadata
   */
  metadata: Paginated;
};

export type IssueCredentialRequest = {
  [key: string]: unknown;
};

/**
 * A JSON-LD Verifiable Credential without a proof.
 */
export type Credential = {
  /**
   * The JSON-LD context of the credential.
   */
  "@context": Array<string>;
  /**
   * The ID of the credential.
   */
  id: string;
  /**
   * The JSON-LD type of the credential.
   */
  type: Array<string>;
  /**
   * The issuer of the credential.
   */
  issuer: string;
  /**
   * The issuance date of the credential.
   */
  issuanceDate: string;
  /**
   * The expiration date of the credential.
   */
  expirationDate: string;
  /**
   * The subject of the credential.
   */
  credentialSubject: {
    [key: string]: unknown;
  };
};

export type IssueCredentialResponse = {
  /**
   * Credential issued.
   */
  credential: Credential;
};

export type LinkedDataProof = {
  type: string;
  created: string;
  verificationMethod: string;
  proofPurpose: string;
  jws: string;
};

export type VerifiableCredential = {
  /**
   * The JSON-LD context of the credential.
   */
  "@context": Array<string>;
  /**
   * The ID of the credential.
   */
  id: string;
  /**
   * The JSON-LD type of the credential.
   */
  type: Array<string>;
  /**
   * The issuer of the credential.
   */
  issuer: string;
  /**
   * The issuance date of the credential.
   */
  issuanceDate: string;
  /**
   * The expiration date of the credential.
   */
  expirationDate: string;
  /**
   * The subject of the credential.
   */
  credentialSubject: {
    [key: string]: unknown;
  };
  proof: LinkedDataProof;
};

/**
 * Options for specifying how the LinkedDataProof is created.
 */
export type VerifyOptions = {
  /**
   * The URI of the verificationMethod used for the proof. Default assertionMethod URI.
   */
  verificationMethod?: string;
  /**
   * The purpose of the proof. Default 'assertionMethod'.
   */
  proofPurpose?: string;
  /**
   * The date and time of the proof (with a maximum accuracy in seconds). Default current system time.
   */
  created?: string;
  /**
   * A challenge provided by the requesting party of the proof. For example 6e62f66e-67de-11eb-b490-ef3eeefa55f2
   */
  challenge?: string;
  /**
   * The intended domain of validity for the proof. For example website.example
   */
  domain?: string;
};

export type VerifyCredentialRequest = {
  verifiableCredential: VerifiableCredential;
  options?: VerifyOptions;
};

export type VerifyCredentialResponse = {
  /**
   * The checks performed
   */
  checks: Array<Array<unknown>>;
  /**
   * Warnings
   */
  warnings: Array<Array<unknown>>;
  /**
   * Errors
   */
  errors: Array<Array<unknown>>;
};

export type CreateTenantUser = {
  [key: string]: unknown;
};

export type TenantUser = {
  /**
   * The ID of the tenant user
   */
  id: string;
  /**
   * The ID of the tenant
   */
  tenantId: string;
  /**
   * The name of the tenant user
   */
  name: string;
  /**
   * The email of the tenant user
   */
  email: string;
  /**
   * The date and time the tenant user was created
   */
  createdAt: string;
  /**
   * The date and time the tenant user was updated
   */
  updatedAt: string;
};

export type UpdateTenantUser = {
  [key: string]: unknown;
};

export type CreateCustodyCommission = {
  /**
   * The unique identifier for this commission
   */
  identifier: string;
  /**
   * List of registered consumer IDs
   */
  registeredConsumers?: Array<string>;
};

export type CustodyCommission = {
  /**
   * The unique identifier of the custody commission
   */
  id: string;
  /**
   * The unique identifier for this commission
   */
  identifier: string;
  /**
   * List of registered consumer IDs
   */
  registeredConsumers: Array<string>;
  /**
   * When the custody commission was created
   */
  createdAt: string;
  /**
   * When the custody commission was last updated
   */
  updatedAt: string;
};

export type ConsumeCustodyCommission = {
  /**
   * The identifier of the custody commission to consume
   */
  identifier: string;
  /**
   * The ID of the consumer consuming the commission
   */
  consumedBy: string;
};

export type CreateDid = {
  /**
   * The name of the DID.
   */
  name: string;
};

export type Did = {
  /**
   * Unique identifier of the DID.
   */
  id: string;
  /**
   * The DID.
   */
  did: string;
  /**
   * The DID alias.
   */
  alias: string;
  /**
   * The name given to the DID.
   */
  name: string;
};

export type PaginatedDids = {
  /**
   * The list of DIDs
   */
  items: Array<Did>;
  /**
   * The pagination metadata
   */
  metadata: Paginated;
};

export type CreateDppDto = {
  /**
   * The id of the credential issuer profile in UUID format
   */
  credentialIssuerProfileId: string;
  /**
   * The valid from date of the DPP in ISO 8601 format
   */
  validFrom: string;
  /**
   * The valid to date of the DPP in ISO 8601 format
   */
  validUntil: string;
  /**
   * The version of the DPP, by default the latest published version will be used.
   */
  version: string;
  /**
   * The credential subject of the DPP
   */
  credentialSubject: {
    [key: string]: unknown;
  };
};

export type Dpp = {
  /**
   * The id of the DPP in UUID format
   */
  id: string;
};

export type CreateEventTag = {
  /**
   * The code of the event tag, a unique identifier
   */
  code: string;
  /**
   * The name of the event tag
   */
  name: string;
  /**
   * The description of the event tag
   */
  description: string;
};

export type EventTag = {
  /**
   * The id of the event tag
   */
  id: string;
  /**
   * The code of the event tag, a unique identifier
   */
  code: string;
  /**
   * The name of the event tag
   */
  name: string;
  /**
   * The description of the event tag
   */
  description: string;
  /**
   * The date and time the event tag was created
   */
  createdAt: string;
  /**
   * The date and time the event tag was updated
   */
  updatedAt: string;
  /**
   * Whether the event tag is deleted
   */
  deleted: boolean;
  /**
   * The date and time the event tag was deleted
   */
  deletedAt: string;
};

export type QuantityElement = {
  /**
   * The EPC class of the quantity element
   */
  epcClass: string;
  /**
   * The quantity of the item
   */
  quantity?: number;
  /**
   * The unit of measurement for the quantity
   */
  unit?: string;
};

export type CreateQuantityElement = {
  /**
   * The EPC class of the quantity element
   */
  epcClass: string;
  /**
   * The trade item of the quantity element. This will create an incrementing batch number.
   */
  tradeItem: string;
  /**
   * Whether the quantity element is a class reference, if false, a lot number is assigned.
   */
  classReference?: boolean;
  /**
   * The quantity of the item
   */
  quantity?: number;
  /**
   * The unit of measurement for the quantity
   */
  unit?: string;
};

export type Source = {
  /**
   * The type of source
   */
  sourceType: "OWNING_PARTY" | "POSSESSING_PARTY" | "LOCATION";
  /**
   * The source string
   */
  source: string;
};

export type Destination = {
  /**
   * The type of destination
   */
  destinationType: "OWNING_PARTY" | "POSSESSING_PARTY" | "LOCATION";
  /**
   * The destination string
   */
  destination: string;
};

export type ReadPoint = {
  /**
   * The identifier of the read point
   */
  identifier: string;
  /**
   * The location of the read point
   */
  location: string;
  /**
   * The latitude of the read point
   */
  lat: number;
  /**
   * The longitude of the read point
   */
  lng: number;
};

export type CreateEvent = {
  /**
   * The time of the event
   */
  eventTime: string;
  /**
   * The type of the event
   */
  eventType:
    | "ASSOCIATION_EVENT"
    | "OBJECT_EVENT"
    | "AGGREGATION_EVENT"
    | "TRANSACTION_EVENT"
    | "TRANSFORMATION_EVENT";
  /**
   * The ACTION of the event.
   */
  action: "OBSERVE" | "ADD" | "DELETE";
  /**
   * The tag associated with the event
   */
  eventTag?: string;
  /**
   * The business step associated with the event
   */
  bizStep?:
    | "ACCEPTING"
    | "ARRIVING"
    | "ASSEMBLING"
    | "COLLECTING"
    | "COMMISSIONING"
    | "CONSIGNING"
    | "CREATING_CLASS_INSTANCE"
    | "CYCLE_COUNTING"
    | "DECOMMISSIONING"
    | "DEPARTING"
    | "DESTROYING"
    | "DISASSEMBLING"
    | "DISPENSING"
    | "ENCODING"
    | "ENTERING_EXITING"
    | "HOLDING"
    | "INSPECTING"
    | "INSTALLING"
    | "KILLING"
    | "LOADING"
    | "OTHER"
    | "PACKING"
    | "PICKING"
    | "RECEIVING"
    | "REMOVING"
    | "REPACKAGING"
    | "REPAIRING"
    | "REPLACING"
    | "RESERVING"
    | "RETAIL_SELLING"
    | "SHIPPING"
    | "STAGING_OUTBOUND"
    | "STOCK_TAKING"
    | "STOCKING"
    | "STORING"
    | "TRANSPORTING"
    | "UNLOADING"
    | "UNPACKING"
    | "VOID_SHIPPING"
    | "SENSOR_REPORTING"
    | "SAMPLING";
  /**
   * The disposition of the event
   */
  disposition?:
    | "ACTIVE"
    | "CONTAINER_CLOSED"
    | "DAMAGED"
    | "DESTROYED"
    | "DISPENSED"
    | "DISPOSED"
    | "ENCODED"
    | "EXPIRED"
    | "IN_PROGRESS"
    | "IN_TRANSIT"
    | "INACTIVE"
    | "NO_PEDIGREE_MATCH"
    | "NON_SELLABLE_OTHER"
    | "PARTIALLY_DISPENSED"
    | "RECALLED"
    | "RESERVED"
    | "RETAIL_SOLD"
    | "RETURNED"
    | "SELLABLE_ACCESSIBLE"
    | "SELLABLE_NOT_ACCESSIBLE"
    | "STOLEN"
    | "UNKNOWN"
    | "AVAILABLE"
    | "COMPLETENESS_VERIFIED"
    | "COMPLETENESS_INFERRED"
    | "CONFORMANT"
    | "CONTAINER_OPEN"
    | "MISMATCH_INSTANCE"
    | "MISMATCH_CLASS"
    | "MISMATCH_QUANTITY"
    | "NEEDS_REPLACEMENT"
    | "NON_CONFORMANT"
    | "UNAVAILABLE";
  /**
   * List of quantities associated with the event
   */
  quantityList?: Array<QuantityElement>;
  /**
   * Output ist of quantities associated with the event
   */
  outputQuantityList?: Array<CreateQuantityElement>;
  /**
   * Input list of quantities associated with the event
   */
  inputQuantityList?: Array<CreateQuantityElement>;
  /**
   * List of sources associated with the event
   */
  sourceList?: Array<Source>;
  /**
   * List of destinations associated with the event
   */
  destinationList?: Array<Destination>;
  /**
   * The read point associated with the event
   */
  readPoint?: ReadPoint;
};

export type Event = {
  /**
   * The id of the event
   */
  id: string;
  /**
   * The time of the event was created
   */
  createdAt: string;
  /**
   * The time of the event
   */
  eventTime: string;
  /**
   * The type of the event
   */
  eventType:
    | "ASSOCIATION_EVENT"
    | "OBJECT_EVENT"
    | "AGGREGATION_EVENT"
    | "TRANSACTION_EVENT"
    | "TRANSFORMATION_EVENT";
  /**
   * The action of the event
   */
  action: "OBSERVE" | "ADD" | "DELETE";
  /**
   * The tag associated with the event
   */
  eventTag?: string;
  /**
   * The business step associated with the event
   */
  bizStep?:
    | "ACCEPTING"
    | "ARRIVING"
    | "ASSEMBLING"
    | "COLLECTING"
    | "COMMISSIONING"
    | "CONSIGNING"
    | "CREATING_CLASS_INSTANCE"
    | "CYCLE_COUNTING"
    | "DECOMMISSIONING"
    | "DEPARTING"
    | "DESTROYING"
    | "DISASSEMBLING"
    | "DISPENSING"
    | "ENCODING"
    | "ENTERING_EXITING"
    | "HOLDING"
    | "INSPECTING"
    | "INSTALLING"
    | "KILLING"
    | "LOADING"
    | "OTHER"
    | "PACKING"
    | "PICKING"
    | "RECEIVING"
    | "REMOVING"
    | "REPACKAGING"
    | "REPAIRING"
    | "REPLACING"
    | "RESERVING"
    | "RETAIL_SELLING"
    | "SHIPPING"
    | "STAGING_OUTBOUND"
    | "STOCK_TAKING"
    | "STOCKING"
    | "STORING"
    | "TRANSPORTING"
    | "UNLOADING"
    | "UNPACKING"
    | "VOID_SHIPPING"
    | "SENSOR_REPORTING"
    | "SAMPLING";
  /**
   * The disposition of the event
   */
  disposition?:
    | "ACTIVE"
    | "CONTAINER_CLOSED"
    | "DAMAGED"
    | "DESTROYED"
    | "DISPENSED"
    | "DISPOSED"
    | "ENCODED"
    | "EXPIRED"
    | "IN_PROGRESS"
    | "IN_TRANSIT"
    | "INACTIVE"
    | "NO_PEDIGREE_MATCH"
    | "NON_SELLABLE_OTHER"
    | "PARTIALLY_DISPENSED"
    | "RECALLED"
    | "RESERVED"
    | "RETAIL_SOLD"
    | "RETURNED"
    | "SELLABLE_ACCESSIBLE"
    | "SELLABLE_NOT_ACCESSIBLE"
    | "STOLEN"
    | "UNKNOWN"
    | "AVAILABLE"
    | "COMPLETENESS_VERIFIED"
    | "COMPLETENESS_INFERRED"
    | "CONFORMANT"
    | "CONTAINER_OPEN"
    | "MISMATCH_INSTANCE"
    | "MISMATCH_CLASS"
    | "MISMATCH_QUANTITY"
    | "NEEDS_REPLACEMENT"
    | "NON_CONFORMANT"
    | "UNAVAILABLE";
  /**
   * List of quantities associated with the event
   */
  quantityList?: Array<QuantityElement>;
  /**
   * Output list of quantities associated with the event
   */
  outputQuantityList?: Array<QuantityElement>;
  /**
   * Input list of quantities associated with the event
   */
  inputQuantityList?: Array<QuantityElement>;
  /**
   * List of sources associated with the event
   */
  sourceList?: Array<Source>;
  /**
   * List of destinations associated with the event
   */
  destinationList?: Array<Destination>;
  /**
   * The read point associated with the event
   */
  readPoint?: ReadPoint;
};

export type CreateExternalResolverDto = {
  /**
   * The href of the External Resolver.
   */
  href: string;
  /**
   * The pattern of the External Resolver.
   */
  pattern: string;
  /**
   * The qualifier of the External Resolver.
   */
  qualifier: string;
  /**
   * The creation data of the External Resolver.
   */
  childExternalResolvers: Array<string>;
};

export type UpdateExternalResolverDto = {
  /**
   * The href of the External Resolver.
   */
  href: string;
  /**
   * The pattern of the External Resolver.
   */
  pattern: string;
  /**
   * The qualifier of the External Resolver.
   */
  qualifier: string;
  /**
   * The creation data of the External Resolver.
   */
  childExternalResolvers: Array<string>;
};

export type CreateLocation = {
  /**
   * The name of the location
   */
  name: string;
  /**
   * The id of the parent location
   */
  parentLocationId?: string | null;
};

export type Location = {
  /**
   * The id of the location
   */
  id: string;
  /**
   * The name of the location
   */
  name: string;
  /**
   * The id of the parent location
   */
  parentLocationId?: string | null;
};

export type CreateTradeItem = {
  /**
   * The name of the trade item
   */
  name: string;
};

export type TradeItem = {
  /**
   * The id of the trade item
   */
  id: string;
  /**
   * The name of the trade item
   */
  name: string;
};

export type CreateOrganization = {
  /**
   * Name given to the organization.
   */
  name: string;
  /**
   * Unique prefix for the organization that will be used in subdomains (e.g., prefix.trustlink.dev).
   */
  prefix: string;
};

export type Organization = {
  /**
   * Unique identifier of the organization.
   */
  id: string;
  /**
   * Name given to the organization.
   */
  name: string;
};

export type UpdateOrganization = {
  /**
   * Name given to the organization.
   */
  name: string;
};

export type CreateSchema = {
  /**
   * The name of the schema
   */
  name: string;
  /**
   * The schema
   */
  schema: {
    [key: string]: unknown;
  };
};

export type Schema = {
  /**
   * The id of the schema
   */
  id: string;
  /**
   * The name of the schema
   */
  name: string;
  /**
   * The schema
   */
  schema: {
    [key: string]: unknown;
  };
};

export type UpdateSchema = {
  /**
   * The id of the schema
   */
  id: string;
  /**
   * The name of the schema
   */
  name: string;
  /**
   * The schema
   */
  schema: {
    [key: string]: unknown;
  };
};

export enum TrustGraphNodeType {
  DTE = "DTE",
  DCC = "DCC",
  DPP = "DPP",
  DIA = "DIA",
  DFR = "DFR",
}

export type TrustGraphNode = {
  /**
   * The id of the trust graph node
   */
  id: string;
  /**
   * The hash of the trust graph node
   */
  hash: string;
  /**
   * The raw data of the trust graph node
   */
  raw: {
    [key: string]: unknown;
  };
  /**
   * The type of the trust graph node
   */
  type: TrustGraphNodeType;
};

export type TrustGraph = {
  /**
   * The id of the trust graph
   */
  id: string;
  /**
   * The hash of the trust graph
   */
  hash: string;
  /**
   * The nodes of the trust graph
   */
  nodes: Array<TrustGraphNode>;
};

export type TraverseTrustGraph = {
  /**
   * The target identifier to traverse from.
   */
  identifier: string;
};

export type HealthCheckData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/health/status";
};

export type HealthCheckResponses = {
  200: unknown;
};

export type LinkCanvasTemplateInstanceData = {
  body: CanvasTemplateInstanceLink;
  path: {
    /**
     * The unique identifier of the canvas template instance.
     */
    id: string;
  };
  query?: never;
  url: "/canvas-template-instances/{id}/link";
};

export type LinkCanvasTemplateInstanceResponses = {
  /**
   * The link was created successfully.
   */
  200: LinkSetDto;
};

export type LinkCanvasTemplateInstanceResponse =
  LinkCanvasTemplateInstanceResponses[keyof LinkCanvasTemplateInstanceResponses];

export type GetThemesData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Page number (1-based)
     */
    page?: number;
    /**
     * Number of items per page
     */
    limit?: number;
  };
  url: "/themes";
};

export type GetThemesResponses = {
  /**
   * The themes that were found
   */
  200: Array<Theme>;
};

export type GetThemesResponse = GetThemesResponses[keyof GetThemesResponses];

export type CreateThemeData = {
  body: CreateTheme;
  path?: never;
  query?: never;
  url: "/themes";
};

export type CreateThemeResponses = {
  /**
   * The theme that was created
   */
  200: Theme;
};

export type CreateThemeResponse =
  CreateThemeResponses[keyof CreateThemeResponses];

export type DeleteThemeData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/themes/{id}";
};

export type DeleteThemeResponses = {
  200: unknown;
};

export type GetThemeData = {
  body?: never;
  path: {
    /**
     * The ID of the theme to find
     */
    id: string;
  };
  query?: never;
  url: "/themes/{id}";
};

export type GetThemeResponses = {
  /**
   * The theme that was found
   */
  200: Theme;
};

export type GetThemeResponse = GetThemeResponses[keyof GetThemeResponses];

export type UpdateThemeData = {
  body: UpdateTheme;
  path: {
    /**
     * The ID of the theme to update
     */
    id: string;
  };
  query?: never;
  url: "/themes/{id}";
};

export type UpdateThemeResponses = {
  /**
   * The theme that was updated
   */
  200: Theme;
};

export type UpdateThemeResponse =
  UpdateThemeResponses[keyof UpdateThemeResponses];

export type GetLinkSetsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/link-sets";
};

export type GetLinkSetsResponses = {
  /**
   * The Link Sets were found and returned.
   */
  200: Array<LinkSet>;
};

export type GetLinkSetsResponse =
  GetLinkSetsResponses[keyof GetLinkSetsResponses];

export type CreateLinkSetData = {
  body: CreateLinkSetDto;
  path?: never;
  query?: never;
  url: "/link-sets";
};

export type CreateLinkSetResponses = {
  /**
   * The Link Set was created.
   */
  201: LinkSet;
};

export type CreateLinkSetResponse =
  CreateLinkSetResponses[keyof CreateLinkSetResponses];

export type DeleteLinkSetData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/link-sets/{id}";
};

export type DeleteLinkSetResponses = {
  200: unknown;
};

export type GetLinkSetData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/link-sets/{id}";
};

export type GetLinkSetResponses = {
  /**
   * The Link Set was found and returned.
   */
  200: LinkSet;
};

export type GetLinkSetResponse = GetLinkSetResponses[keyof GetLinkSetResponses];

export type UpdateLinkSetData = {
  body: UpdateLinkSetDto;
  path: {
    id: string;
  };
  query?: never;
  url: "/link-sets/{id}";
};

export type UpdateLinkSetResponses = {
  /**
   * The Link Set was updated.
   */
  201: LinkSet;
};

export type UpdateLinkSetResponse =
  UpdateLinkSetResponses[keyof UpdateLinkSetResponses];

export type GetCanvasTemplateData = {
  body?: never;
  path: {
    /**
     * The ID of the Canvas Template to find
     */
    id: unknown;
  };
  query?: never;
  url: "/canvas-templates/{id}";
};

export type GetCanvasTemplateResponses = {
  /**
   * The Canvas Template was successfully obtained.
   */
  200: CanvasTemplate;
};

export type GetCanvasTemplateResponse =
  GetCanvasTemplateResponses[keyof GetCanvasTemplateResponses];

export type CreateCanvasTemplateData = {
  body: CreateCanvasTemplate;
  path?: never;
  query?: never;
  url: "/canvas-templates";
};

export type CreateCanvasTemplateResponses = {
  /**
   * The Canvas Template that was created.
   */
  200: CanvasTemplate;
};

export type CreateCanvasTemplateResponse =
  CreateCanvasTemplateResponses[keyof CreateCanvasTemplateResponses];

export type RenderCanvasTemplateData = {
  body: {
    [key: string]:
      | string
      | number
      | boolean
      | {
          [key: string]: unknown;
        }
      | Array<unknown>;
  };
  path: {
    /**
     * The ID of the Canvas Template to render
     */
    id: string;
  };
  query?: never;
  url: "/canvas-templates/{id}/render";
};

export type RenderCanvasTemplateResponses = {
  /**
   * Instantiation of the Canvas Template as a Canvas Template Instance
   */
  200: CanvasTemplateInstance;
};

export type RenderCanvasTemplateResponse =
  RenderCanvasTemplateResponses[keyof RenderCanvasTemplateResponses];

export type GetCredentialIssuerProfilesData = {
  body?: never;
  path?: never;
  query: {
    page: number;
    limit: number;
  };
  url: "/credential-issuer-profiles";
};

export type GetCredentialIssuerProfilesResponses = {
  /**
   * Credential issuer profiles fetched successfully
   */
  200: PaginatedCredentialIssuerProfiles;
};

export type GetCredentialIssuerProfilesResponse =
  GetCredentialIssuerProfilesResponses[keyof GetCredentialIssuerProfilesResponses];

export type CreateCredentialIssuerProfileData = {
  body: CreateCredentialIssuerProfile;
  path?: never;
  query?: never;
  url: "/credential-issuer-profiles";
};

export type CreateCredentialIssuerProfileErrors = {
  /**
   * Invalid request
   */
  400: unknown;
};

export type CreateCredentialIssuerProfileResponses = {
  /**
   * Credential issuer profile created successfully
   */
  201: CredentialIssuerProfile;
};

export type CreateCredentialIssuerProfileResponse =
  CreateCredentialIssuerProfileResponses[keyof CreateCredentialIssuerProfileResponses];

export type DeleteCredentialIssuerProfileData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/credential-issuer-profiles/{id}";
};

export type DeleteCredentialIssuerProfileResponses = {
  /**
   * Credential issuer profile deleted successfully
   */
  204: void;
};

export type DeleteCredentialIssuerProfileResponse =
  DeleteCredentialIssuerProfileResponses[keyof DeleteCredentialIssuerProfileResponses];

export type GetCredentialIssuerProfileData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/credential-issuer-profiles/{id}";
};

export type GetCredentialIssuerProfileErrors = {
  /**
   * Credential issuer profile not found
   */
  403: unknown;
};

export type GetCredentialIssuerProfileResponses = {
  /**
   * Credential issuer profile fetched successfully
   */
  200: CredentialIssuerProfile;
};

export type GetCredentialIssuerProfileResponse =
  GetCredentialIssuerProfileResponses[keyof GetCredentialIssuerProfileResponses];

export type GetCredentialData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/credentials/{id}";
};

export type GetCredentialResponses = {
  200: unknown;
};

export type IssueCredentialData = {
  body: IssueCredentialRequest;
  path?: never;
  query?: never;
  url: "/credentials/issue";
};

export type IssueCredentialErrors = {
  /**
   * Invalid request
   */
  400: unknown;
};

export type IssueCredentialResponses = {
  /**
   * Credential successfully issued!
   */
  201: IssueCredentialResponse;
};

export type IssueCredentialResponse2 =
  IssueCredentialResponses[keyof IssueCredentialResponses];

export type VerifyCredentialData = {
  body: VerifyCredentialRequest;
  path?: never;
  query?: never;
  url: "/credentials/verify";
};

export type VerifyCredentialErrors = {
  /**
   * Invalid request
   */
  400: unknown;
};

export type VerifyCredentialResponses = {
  /**
   * Verifiable Credential successfully verified!
   */
  200: VerifyCredentialResponse;
};

export type VerifyCredentialResponse2 =
  VerifyCredentialResponses[keyof VerifyCredentialResponses];

export type GetTenantUsersData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/auth/tenant-users";
};

export type GetTenantUsersErrors = {
  /**
   * Unauthorized access
   */
  401: unknown;
};

export type GetTenantUsersResponses = {
  /**
   * The tenant users have been successfully retrieved
   */
  200: Array<TenantUser>;
};

export type GetTenantUsersResponse =
  GetTenantUsersResponses[keyof GetTenantUsersResponses];

export type CreateTenantUserData = {
  body: CreateTenantUser;
  path?: never;
  query?: never;
  url: "/auth/tenant-users";
};

export type CreateTenantUserErrors = {
  /**
   * The tenant user could not be created
   */
  400: unknown;
  /**
   * The tenant user could not be found
   */
  404: unknown;
};

export type CreateTenantUserResponses = {
  /**
   * The tenant user has been successfully created
   */
  201: TenantUser;
};

export type CreateTenantUserResponse =
  CreateTenantUserResponses[keyof CreateTenantUserResponses];

export type DeleteTenantUserData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/auth/tenant-users/{id}";
};

export type DeleteTenantUserErrors = {
  /**
   * Unauthorized access
   */
  401: unknown;
  /**
   * The tenant user could not be found
   */
  404: unknown;
};

export type DeleteTenantUserResponses = {
  /**
   * The tenant user has been successfully deleted
   */
  200: unknown;
};

export type GetTenantUserByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/auth/tenant-users/{id}";
};

export type GetTenantUserByIdErrors = {
  /**
   * Unauthorized access
   */
  401: unknown;
  /**
   * The tenant user could not be found
   */
  404: unknown;
};

export type GetTenantUserByIdResponses = {
  /**
   * The tenant user has been successfully retrieved
   */
  200: TenantUser;
};

export type GetTenantUserByIdResponse =
  GetTenantUserByIdResponses[keyof GetTenantUserByIdResponses];

export type UpdateTenantUserData = {
  body: UpdateTenantUser;
  path: {
    id: string;
  };
  query?: never;
  url: "/auth/tenant-users/{id}";
};

export type UpdateTenantUserErrors = {
  /**
   * The tenant user could not be updated
   */
  400: unknown;
  /**
   * Unauthorized access
   */
  401: unknown;
  /**
   * The tenant user could not be found
   */
  404: unknown;
};

export type UpdateTenantUserResponses = {
  /**
   * The tenant user has been successfully updated
   */
  200: TenantUser;
};

export type UpdateTenantUserResponse =
  UpdateTenantUserResponses[keyof UpdateTenantUserResponses];

export type ClearSandboxData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/sandbox/clear";
};

export type ClearSandboxResponses = {
  /**
   * The sandbox data has been successfully cleared
   */
  200: unknown;
};

export type GetCustodyCommissionsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Page number (1-based)
     */
    page?: number;
    /**
     * Number of items per page
     */
    limit?: number;
  };
  url: "/custody-commissions";
};

export type GetCustodyCommissionsResponses = {
  /**
   * The custody commissions have been successfully retrieved
   */
  200: Array<CustodyCommission>;
};

export type GetCustodyCommissionsResponse =
  GetCustodyCommissionsResponses[keyof GetCustodyCommissionsResponses];

export type CreateCustodyCommissionData = {
  body: CreateCustodyCommission;
  path?: never;
  query?: never;
  url: "/custody-commissions";
};

export type CreateCustodyCommissionErrors = {
  /**
   * The custody commission could not be created
   */
  400: unknown;
};

export type CreateCustodyCommissionResponses = {
  /**
   * The custody commission has been successfully created
   */
  201: CustodyCommission;
};

export type CreateCustodyCommissionResponse =
  CreateCustodyCommissionResponses[keyof CreateCustodyCommissionResponses];

export type DeleteCustodyCommissionData = {
  body?: never;
  path: {
    /**
     * The ID of the custody commission to delete
     */
    id: string;
  };
  query?: never;
  url: "/custody-commissions/{id}";
};

export type DeleteCustodyCommissionErrors = {
  /**
   * The custody commission could not be found
   */
  404: unknown;
};

export type DeleteCustodyCommissionResponses = {
  /**
   * The custody commission has been successfully deleted
   */
  204: void;
};

export type DeleteCustodyCommissionResponse =
  DeleteCustodyCommissionResponses[keyof DeleteCustodyCommissionResponses];

export type GetCustodyCommissionData = {
  body?: never;
  path: {
    /**
     * The ID of the custody commission to get
     */
    id: string;
  };
  query?: never;
  url: "/custody-commissions/{id}";
};

export type GetCustodyCommissionErrors = {
  /**
   * The custody commission could not be found
   */
  404: unknown;
};

export type GetCustodyCommissionResponses = {
  /**
   * The custody commission has been successfully retrieved
   */
  200: CustodyCommission;
};

export type GetCustodyCommissionResponse =
  GetCustodyCommissionResponses[keyof GetCustodyCommissionResponses];

export type UpdateCustodyCommissionData = {
  body?: never;
  path: {
    /**
     * The ID of the custody commission to update
     */
    id: string;
  };
  query?: never;
  url: "/custody-commissions/{id}";
};

export type UpdateCustodyCommissionErrors = {
  /**
   * The custody commission could not be found
   */
  404: unknown;
};

export type UpdateCustodyCommissionResponses = {
  /**
   * The custody commission has been successfully updated
   */
  200: CustodyCommission;
};

export type UpdateCustodyCommissionResponse =
  UpdateCustodyCommissionResponses[keyof UpdateCustodyCommissionResponses];

export type ConsumeCustodyCommissionData = {
  body: ConsumeCustodyCommission;
  path?: never;
  query?: never;
  url: "/custody-commissions/consume";
};

export type ConsumeCustodyCommissionErrors = {
  /**
   * The custody commission could not be found or has already been consumed
   */
  404: unknown;
};

export type ConsumeCustodyCommissionResponses = {
  /**
   * The custody commission has been successfully consumed
   */
  200: CustodyCommission;
};

export type ConsumeCustodyCommissionResponse =
  ConsumeCustodyCommissionResponses[keyof ConsumeCustodyCommissionResponses];

export type GetDidsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Page number (1-based)
     */
    page?: number;
    /**
     * Number of items per page
     */
    limit?: number;
  };
  url: "/did";
};

export type GetDidsResponses = {
  /**
   * DIDs fetched successfully
   */
  200: PaginatedDids;
};

export type GetDidsResponse = GetDidsResponses[keyof GetDidsResponses];

export type CreateDidData = {
  body: CreateDid;
  path?: never;
  query?: never;
  url: "/did";
};

export type CreateDidErrors = {
  /**
   * Invalid request
   */
  400: unknown;
};

export type CreateDidResponses = {
  /**
   * DID created successfully
   */
  201: Did;
};

export type CreateDidResponse = CreateDidResponses[keyof CreateDidResponses];

export type DeleteDidData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/did/{id}";
};

export type DeleteDidResponses = {
  /**
   * DID deleted successfully
   */
  204: void;
};

export type DeleteDidResponse = DeleteDidResponses[keyof DeleteDidResponses];

export type GetDidData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/did/{id}";
};

export type GetDidErrors = {
  /**
   * DID not found
   */
  403: unknown;
};

export type GetDidResponses = {
  /**
   * DID fetched successfully
   */
  200: Did;
};

export type GetDidResponse = GetDidResponses[keyof GetDidResponses];

export type CreateDppData = {
  body: CreateDppDto;
  path?: never;
  query?: never;
  url: "/dpp";
};

export type CreateDppResponses = {
  /**
   * DPP created successfully
   */
  200: Dpp;
};

export type CreateDppResponse = CreateDppResponses[keyof CreateDppResponses];

export type DeleteDppData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/dpp/{id}";
};

export type DeleteDppResponses = {
  /**
   * DPP deleted successfully
   */
  200: unknown;
};

export type GetDppData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/dpp/{id}";
};

export type GetDppResponses = {
  /**
   * DPP retrieved successfully
   */
  200: Dpp;
};

export type GetDppResponse = GetDppResponses[keyof GetDppResponses];

export type GetEventTagsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Page number (1-based)
     */
    page?: number;
    /**
     * Number of items per page
     */
    limit?: number;
  };
  url: "/event-tags";
};

export type GetEventTagsResponses = {
  /**
   * The event tags have been successfully retrieved
   */
  200: Array<EventTag>;
};

export type GetEventTagsResponse =
  GetEventTagsResponses[keyof GetEventTagsResponses];

export type CreateEventTagData = {
  body: CreateEventTag;
  path?: never;
  query?: never;
  url: "/event-tags";
};

export type CreateEventTagErrors = {
  /**
   * Invalid request
   */
  400: unknown;
};

export type CreateEventTagResponses = {
  /**
   * Event tag created successfully
   */
  201: EventTag;
};

export type CreateEventTagResponse =
  CreateEventTagResponses[keyof CreateEventTagResponses];

export type SetEventTagsData = {
  /**
   * Array of event tags to set
   */
  body: Array<CreateEventTag>;
  path?: never;
  query?: never;
  url: "/event-tags/set";
};

export type SetEventTagsErrors = {
  /**
   * Invalid request
   */
  400: unknown;
};

export type SetEventTagsResponses = {
  /**
   * Event tags set successfully
   */
  200: Array<EventTag>;
};

export type SetEventTagsResponse =
  SetEventTagsResponses[keyof SetEventTagsResponses];

export type DeleteEventTagData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/event-tags/{id}";
};

export type DeleteEventTagErrors = {
  /**
   * Event tag not found
   */
  404: unknown;
};

export type DeleteEventTagResponses = {
  /**
   * Event tag deleted successfully
   */
  200: unknown;
};

export type GetEventTagData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/event-tags/{id}";
};

export type GetEventTagErrors = {
  /**
   * Event tag not found
   */
  404: unknown;
};

export type GetEventTagResponses = {
  /**
   * Event tag retrieved successfully
   */
  200: EventTag;
};

export type GetEventTagResponse =
  GetEventTagResponses[keyof GetEventTagResponses];

export type GetEventsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Page number (1-based)
     */
    page?: number;
    /**
     * Number of items per page
     */
    limit?: number;
  };
  url: "/events";
};

export type GetEventsResponses = {
  /**
   * The events have been successfully retrieved
   */
  200: Array<Event>;
};

export type GetEventsResponse = GetEventsResponses[keyof GetEventsResponses];

export type CreateEventData = {
  body: CreateEvent;
  path?: never;
  query?: never;
  url: "/events";
};

export type CreateEventErrors = {
  /**
   * The location could not be created
   */
  400: unknown;
  /**
   * The parent location could not be found
   */
  404: unknown;
};

export type CreateEventResponses = {
  /**
   * The location has been successfully created
   */
  201: Event;
};

export type CreateEventResponse =
  CreateEventResponses[keyof CreateEventResponses];

export type DeleteEventData = {
  body?: never;
  path: {
    /**
     * The ID of the event to delete
     */
    id: string;
  };
  query?: never;
  url: "/events/{id}";
};

export type DeleteEventErrors = {
  /**
   * The event could not be found
   */
  404: unknown;
};

export type DeleteEventResponses = {
  /**
   * The event has been successfully deleted
   */
  200: unknown;
};

export type GetEventData = {
  body?: never;
  path: {
    /**
     * The ID of the event to get
     */
    id: string;
  };
  query?: never;
  url: "/events/{id}";
};

export type GetEventErrors = {
  /**
   * The event could not be found
   */
  404: unknown;
};

export type GetEventResponses = {
  /**
   * The event has been successfully retrieved
   */
  200: Event;
};

export type GetEventResponse = GetEventResponses[keyof GetEventResponses];

export type GetManyExternalResolversData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/external-resolvers";
};

export type GetManyExternalResolversResponses = {
  200: unknown;
};

export type CreateExternalResolverData = {
  body: CreateExternalResolverDto;
  path?: never;
  query?: never;
  url: "/external-resolvers";
};

export type CreateExternalResolverResponses = {
  201: unknown;
};

export type DeleteExternalResolverData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/external-resolvers/{id}";
};

export type DeleteExternalResolverResponses = {
  200: unknown;
};

export type GetExternalResolverData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/external-resolvers/{id}";
};

export type GetExternalResolverResponses = {
  200: unknown;
};

export type UpdateExternalResolverData = {
  body: UpdateExternalResolverDto;
  path: {
    id: string;
  };
  query?: never;
  url: "/external-resolvers/{id}";
};

export type UpdateExternalResolverResponses = {
  200: unknown;
};

export type GetLocationsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Page number (1-based)
     */
    page?: number;
    /**
     * Number of items per page
     */
    limit?: number;
    /**
     * The ID of the parent location
     */
    parentLocationId?: string;
  };
  url: "/locations";
};

export type GetLocationsResponses = {
  /**
   * The locations have been successfully retrieved
   */
  200: Array<Location>;
};

export type GetLocationsResponse =
  GetLocationsResponses[keyof GetLocationsResponses];

export type CreateLocationData = {
  body: CreateLocation;
  path?: never;
  query?: never;
  url: "/locations";
};

export type CreateLocationErrors = {
  /**
   * The location could not be created
   */
  400: unknown;
  /**
   * The parent location could not be found
   */
  404: unknown;
};

export type CreateLocationResponses = {
  /**
   * The location has been successfully created
   */
  201: Location;
};

export type CreateLocationResponse =
  CreateLocationResponses[keyof CreateLocationResponses];

export type GetLocationData = {
  body?: never;
  path: {
    /**
     * The ID of the location to get
     */
    id: string;
  };
  query?: never;
  url: "/locations/{id}";
};

export type GetLocationErrors = {
  /**
   * The location could not be found
   */
  404: unknown;
};

export type GetLocationResponses = {
  /**
   * The location has been successfully retrieved
   */
  200: Location;
};

export type GetLocationResponse =
  GetLocationResponses[keyof GetLocationResponses];

export type GetTradeItemsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Page number (1-based)
     */
    page?: number;
    /**
     * Number of items per page
     */
    limit?: number;
  };
  url: "/trade-items";
};

export type GetTradeItemsResponses = {
  /**
   * The trade items have been successfully retrieved
   */
  200: Array<TradeItem>;
};

export type GetTradeItemsResponse =
  GetTradeItemsResponses[keyof GetTradeItemsResponses];

export type CreateTradeItemData = {
  body: CreateTradeItem;
  path?: never;
  query?: never;
  url: "/trade-items";
};

export type CreateTradeItemErrors = {
  /**
   * The trade item could not be created
   */
  400: unknown;
};

export type CreateTradeItemResponses = {
  /**
   * The trade item has been successfully created
   */
  201: TradeItem;
};

export type CreateTradeItemResponse =
  CreateTradeItemResponses[keyof CreateTradeItemResponses];

export type DeleteTradeItemData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/trade-items/{id}";
};

export type DeleteTradeItemResponses = {
  /**
   * The trade item has been successfully deleted
   */
  200: unknown;
};

export type GetTradeItemData = {
  body?: never;
  path: {
    /**
     * The ID of the trade item to get
     */
    id: string;
  };
  query?: never;
  url: "/trade-items/{id}";
};

export type GetTradeItemErrors = {
  /**
   * The trade item could not be found
   */
  404: unknown;
};

export type GetTradeItemResponses = {
  /**
   * The trade item has been successfully retrieved
   */
  200: TradeItem;
};

export type GetTradeItemResponse =
  GetTradeItemResponses[keyof GetTradeItemResponses];

export type GetTradeItemByIdentifierData = {
  body?: never;
  path: {
    /**
     * The identifier of the trade item (format: {prefix}.{referenceNumber} or {prefix}.{referenceNumber}.{batchNumber})
     */
    identifier: string;
  };
  query?: never;
  url: "/trade-items/by-identifier/{identifier}";
};

export type GetTradeItemByIdentifierErrors = {
  /**
   * The trade item could not be found
   */
  404: unknown;
};

export type GetTradeItemByIdentifierResponses = {
  /**
   * The trade item has been successfully retrieved
   */
  200: TradeItem;
};

export type GetTradeItemByIdentifierResponse =
  GetTradeItemByIdentifierResponses[keyof GetTradeItemByIdentifierResponses];

export type CreateOrganizationData = {
  body: CreateOrganization;
  path?: never;
  query?: never;
  url: "/organizations";
};

export type CreateOrganizationErrors = {
  /**
   * Invalid request
   */
  400: unknown;
};

export type CreateOrganizationResponses = {
  /**
   * Organization created successfully
   */
  201: Organization;
};

export type CreateOrganizationResponse =
  CreateOrganizationResponses[keyof CreateOrganizationResponses];

export type DeleteOrganizationData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/organizations/{id}";
};

export type DeleteOrganizationErrors = {
  /**
   * Organization not found
   */
  404: unknown;
};

export type DeleteOrganizationResponses = {
  /**
   * Organization deleted successfully
   */
  200: unknown;
};

export type GetOrganizationData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/organizations/{id}";
};

export type GetOrganizationErrors = {
  /**
   * Organization not found
   */
  404: unknown;
};

export type GetOrganizationResponses = {
  /**
   * Organization retrieved successfully
   */
  200: Organization;
};

export type GetOrganizationResponse =
  GetOrganizationResponses[keyof GetOrganizationResponses];

export type UpdateOrganizationData = {
  body: UpdateOrganization;
  path: {
    id: string;
  };
  query?: never;
  url: "/organizations/{id}";
};

export type UpdateOrganizationErrors = {
  /**
   * Invalid request
   */
  400: unknown;
  /**
   * Organization not found
   */
  404: unknown;
};

export type UpdateOrganizationResponses = {
  /**
   * Organization updated successfully
   */
  200: Organization;
};

export type UpdateOrganizationResponse =
  UpdateOrganizationResponses[keyof UpdateOrganizationResponses];

export type CreateSchemaData = {
  body: CreateSchema;
  path?: never;
  query?: never;
  url: "/schemas";
};

export type CreateSchemaErrors = {
  /**
   * Invalid request
   */
  400: unknown;
};

export type CreateSchemaResponses = {
  /**
   * Schema created successfully
   */
  201: Schema;
};

export type CreateSchemaResponse =
  CreateSchemaResponses[keyof CreateSchemaResponses];

export type DeleteSchemaData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/schemas/{id}";
};

export type DeleteSchemaErrors = {
  /**
   * Schema not found
   */
  404: unknown;
};

export type DeleteSchemaResponses = {
  /**
   * Schema deleted successfully
   */
  200: unknown;
};

export type GetSchemaData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/schemas/{id}";
};

export type GetSchemaErrors = {
  /**
   * Schema not found
   */
  404: unknown;
};

export type GetSchemaResponses = {
  /**
   * Schema retrieved successfully
   */
  200: Schema;
};

export type GetSchemaResponse = GetSchemaResponses[keyof GetSchemaResponses];

export type UpdateSchemaData = {
  body: UpdateSchema;
  path: {
    id: string;
  };
  query?: never;
  url: "/schemas/{id}";
};

export type UpdateSchemaErrors = {
  /**
   * Invalid request
   */
  400: unknown;
  /**
   * Schema not found
   */
  404: unknown;
};

export type UpdateSchemaResponses = {
  /**
   * Schema updated successfully
   */
  200: Schema;
};

export type UpdateSchemaResponse =
  UpdateSchemaResponses[keyof UpdateSchemaResponses];

export type GetTrustGraphData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/discovery/trust-graph/{id}";
};

export type GetTrustGraphErrors = {
  /**
   * The trust graph was not found
   */
  403: unknown;
};

export type GetTrustGraphResponses = {
  /**
   * The trust graph
   */
  200: TrustGraph;
};

export type GetTrustGraphResponse =
  GetTrustGraphResponses[keyof GetTrustGraphResponses];

export type TraverseTrustGraphData = {
  body: TraverseTrustGraph;
  path?: never;
  query?: never;
  url: "/discovery/trust-graph/traverse";
};

export type TraverseTrustGraphResponses = {
  /**
   * The trust graph traversed.
   */
  200: TrustGraph;
};

export type TraverseTrustGraphResponse =
  TraverseTrustGraphResponses[keyof TraverseTrustGraphResponses];

export type ClientOptions = {
  baseUrl: string;
};
